import numpy as np# abserhdfrom privacy import privacyclass TestPrivacy(object):        def test_distance_euclidean(self):                pri = privacy()                metric = 'euclidean'        a = np.array([[1,1]])        b = np.array([[2,1]])        d = pri.distance(a=a,b=b,metric=metric)                assert d == 1            def test_distance_hamming(self):                pri = privacy()                metric = 'hamming'        a = np.array([[1,1]])        b = np.array([[1,1]])        d = pri.distance(a=a,b=b,metric=metric)                assert d == 0                def test_nearest_neighbor(self):                threshold=1e-5        metric = "euclidean"        x = np.array([[1,1],[4,4], [5,4]])        pri = privacy()                nn_dist = pri.nearest_neighbors(a=x, metric=metric)        assert abs(nn_dist[0] - pri.distance(x[0,:], x[1,:], metric)) < threshold                def test_assess_memorization(self):                n = 10        m = 3        pri = privacy()                x_real = np.random.random(size=(n,m))        x_synth = np.random.random(size=(n,m))        res = pri.assess_memorization(x_real, x_synth, 'euclidean')                assert np.mean(res['real']) < np.mean(res['rand'])